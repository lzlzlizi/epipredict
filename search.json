[{"path":"https://cmu-delphi.github.io/epipredict/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 epipredict authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/articles/knn-forecasts.html","id":"knn-enhanced-direct-arx-forecastor","dir":"Articles","previous_headings":"","what":"KNN Enhanced Direct ARX Forecastor","title":"KNN AR(X) forecasts","text":"First, download data process (hidden). now make forecasts archive compare forecasts latest data.","code":"# Latest snapshot of data, and forecast dates x_latest <- epix_as_of(x, max_version = max(x$DT$version)) fc_time_values <- seq(as.Date(\"2020-10-01\"), as.Date(\"2021-12-01\"),                        by = \"1 month\")   k_week_ahead <- function(ahead = 7, as_of = TRUE) {   if (as_of) {     x %>%       epix_slide(fc = knnarx_forecaster(         percent_cli, case_rate, geo_value, time_value,          args = knnarx_args_list(ahead = ahead,                       lags = c(1,7,14),                       query_window_len = 32,                       topK = 100,                       intercept = FALSE)),         n = Inf, ref_time_values = fc_time_values) %>%       mutate(target_date = time_value + ahead, as_of = as_of,              geo_value = fc_key_vars)   } else {     x_latest %>%       epi_slide(fc = knnarx_forecaster(         percent_cli, case_rate, geo_value, time_value,         args = knnarx_args_list(ahead = ahead,                       lags = c(1,7,14),                       query_window_len = 32,                       topK = 100,                        intercept = FALSE)),         n = Inf, ref_time_values = fc_time_values) %>%       mutate(target_date = time_value + ahead, as_of = as_of)   } }  # Generate the forecasts, and bind them together fc <- bind_rows(   purrr::map_dfr(c(7,14,21,28), ~ k_week_ahead(.x, as_of = TRUE)),   purrr::map_dfr(c(7,14,21,28), ~ k_week_ahead(.x, as_of = FALSE)) ) ggplot(fc %>% filter(as_of == TRUE), aes(x = target_date, group = time_value)) +   geom_vline(aes(xintercept = time_value), linetype = 2, alpha = 0.5) +   geom_line(data = x_latest, aes(x = time_value, y = case_rate),             inherit.aes = FALSE, color = \"gray50\") +   geom_ribbon(aes(ymin = fc_q0.05, ymax = fc_q0.95, fill = geo_value), alpha = 0.4) +   geom_line(aes(y = fc_point)) +   geom_point(aes(y = fc_point), size = 0.5) +   facet_wrap(~ geo_value, ncol = 4, scales = \"free_y\") +   scale_x_date(minor_breaks = \"month\", date_labels = \"%b %y\") +   labs(x = \"Date\", y = \"Reported COVID-19 case rates\") +   theme(legend.position = \"none\")"},{"path":"https://cmu-delphi.github.io/epipredict/articles/knn-forecasts.html","id":"knn-enhanced-iterative-ar-forecastor","dir":"Articles","previous_headings":"","what":"KNN Enhanced Iterative AR Forecastor","title":"KNN AR(X) forecasts","text":"moment, KNN Enhanced iterative forecasting strategy support AR forecastor, means can deal one signal time. direct example, following pipeline run predictions iterative forecasting strategy.  update_model parameter iterative forecastor API decides one-step ahead model updated iterative predicting procedure. following pipeline shows results trigger turned .","code":"ahead <- 21 final_iterative <- x %>%   epix_slide(     fc = knn_iteraive_ar_forecaster(       NULL, case_rate, geo_value, time_value,       args = knn_iteraive_ar_args_list(         ahead = ahead,         lags = c(1, 7, 14),         query_window_len = 32,         topK = 100,         symmetrize = FALSE,         update_model = FALSE       )     ) %>% nest_by(key_vars),     n = Inf, ref_time_values = fc_time_values   ) %>% unnest(fc_data) %>%    mutate(target_date = time_value + ahead, as_of = TRUE) %>%   rename(geo_value = fc_key_vars)  ggplot(final_iterative, aes(x = target_date, group = time_value)) +   geom_vline(aes(xintercept = time_value), linetype = 2, alpha = 0.5) +   geom_line(data = x_latest  , aes(x = time_value, y = case_rate),             inherit.aes = FALSE, color = \"gray50\") +   geom_ribbon(aes(ymin = q0.05, ymax = q0.95, fill = geo_value), alpha = 0.4) +   geom_line(aes(y = point)) +   geom_point(aes(y = point), size = 0.5) +   facet_wrap(~ geo_value, ncol = 4, scales = \"free_y\") +   scale_x_date(minor_breaks = \"month\", date_labels = \"%b %y\") +   labs(x = \"Date\", y = \"Reported COVID-19 case rates\") +   theme(legend.position = \"none\") final_dynamiciterative <- x %>%   epix_slide(     fc = knn_iteraive_ar_forecaster(       NULL, case_rate, geo_value, time_value,       args = knn_iteraive_ar_args_list(         ahead = ahead,         lags = c(1, 7, 14),         query_window_len = 32,         topK = 100,         symmetrize = FALSE,         update_model = TRUE       )     ) %>% nest_by(key_vars),     n = Inf, ref_time_values = fc_time_values   ) %>% unnest(fc_data) %>%    mutate(target_date = time_value + ahead, as_of = TRUE) %>%   rename(geo_value = fc_key_vars)  ggplot(final_dynamiciterative, aes(x = target_date, group = time_value)) +   geom_vline(aes(xintercept = time_value), linetype = 2, alpha = 0.5) +   geom_line(data = x_latest  , aes(x = time_value, y = case_rate),             inherit.aes = FALSE, color = \"gray50\") +   geom_ribbon(aes(ymin = q0.05, ymax = q0.95, fill = geo_value), alpha = 0.4) +   geom_line(aes(y = point)) +   geom_point(aes(y = point), size = 0.5) +   facet_wrap(~ geo_value, ncol = 4, scales = \"free_y\") +   scale_x_date(minor_breaks = \"month\", date_labels = \"%b %y\") +   labs(x = \"Date\", y = \"Reported COVID-19 case rates\") +   theme(legend.position = \"none\")"},{"path":"https://cmu-delphi.github.io/epipredict/articles/knn-forecasts.html","id":"using-data-for-canada","dir":"Articles","previous_headings":"","what":"Using data for Canada","title":"KNN AR(X) forecasts","text":"leveraging flexibility epiprocess, can apply techniques data sources. Since ’m British Columbia, may well thing Canada. COVID-19 Canada Open Data Working Group collects daily time series data COVID-19 cases, deaths, recoveries, testing vaccinations health region province levels. Data collected publicly available sources government datasets news releases. Unfortunately, simple versioned source, created Commit history. First, load versioned case numbers provincial level, convert epi_archive object. run similar forcasting exercise . figures shows results provinces. Note showing 7-day averages rather reported case numbers due highly variable provincial reporting mismatches.","code":"# source(\"drafts/canada-case-rates.R) can <- readRDS(   system.file(\"extdata\", \"can_prov_cases.rds\",                package = \"epipredict\", mustWork = TRUE)   ) %>%   group_by(version, geo_value) %>%    arrange(time_value) %>%    mutate(cr_7dav = RcppRoll::roll_meanr(case_rate, n = 7L))  can <- as_epi_archive(can) can_latest <- epix_as_of(can, max_version = max(can$DT$version)) can_fc_time_values = seq(as.Date(\"2020-10-01\"), as.Date(\"2021-11-01\"),                        by = \"1 month\")  can_k_week_ahead <- function(ahead = 7, as_of = TRUE) {   if (as_of) {     can %>%       epix_slide(fc = knnarx_forecaster(         y = cr_7dav, key_vars = geo_value, time_value = time_value,         args =knnarx_args_list(ahead = ahead,                       lags = c(1,7,14),                       query_window_len = 32,                       topK = 200)),         n = Inf, ref_time_values = fc_time_values) %>%       mutate(target_date = time_value + ahead, geo_value = fc_key_vars,              as_of = as_of)   } else {     can_latest %>%       epi_slide(fc = knnarx_forecaster(         y = cr_7dav, key_vars = geo_value, time_value = time_value,         args = knnarx_args_list(ahead = ahead,                       lags = c(1,7,14),                       query_window_len = 32,                       topK = 300)),         n = Inf, ref_time_values = fc_time_values) %>%       mutate(target_date = time_value + ahead, geo_value = fc_key_vars,              as_of = as_of)   } }  can_fc <- bind_rows(   purrr:::map_dfr(c(7,14,21,28), ~ can_k_week_ahead(ahead = .x, as_of = TRUE)),   purrr:::map_dfr(c(7,14,21,28), ~ can_k_week_ahead(ahead = .x, as_of = FALSE)) ) ggplot(can_fc %>% filter(! as_of),         aes(x = target_date, group = time_value)) +   coord_cartesian(xlim = lubridate::ymd(c(\"2020-12-01\", NA))) +   geom_line(data = can_latest, aes(x = time_value, y = cr_7dav),             inherit.aes = FALSE, color = \"gray50\") +   geom_ribbon(aes(ymin = fc_q0.05, ymax = fc_q0.95, fill = geo_value),               alpha = 0.4) +   geom_line(aes(y = fc_point)) + geom_point(aes(y = fc_point), size = 0.5) +      geom_vline(aes(xintercept = time_value), linetype = 2, alpha = 0.5) +   facet_wrap(~geo_value, scales = \"free_y\", ncol = 3) +   scale_x_date(minor_breaks = \"month\", date_labels = \"%b %y\") +   labs(title = \"Finalized data\", x = \"Date\",         y = \"Reported COVID-19 case rates\") +   theme(legend.position = \"none\") ggplot(can_fc %>% filter(as_of),         aes(x = target_date, group = time_value)) +   coord_cartesian(xlim = lubridate::ymd(c(\"2020-12-01\", NA))) +   geom_line(data = can_latest, aes(x = time_value, y = cr_7dav),             inherit.aes = FALSE, color = \"gray50\") +   geom_ribbon(aes(ymin = fc_q0.05, ymax = fc_q0.95, fill = geo_value),               alpha = 0.4) +   geom_line(aes(y = fc_point)) + geom_point(aes(y = fc_point), size = 0.5) +   geom_vline(aes(xintercept = time_value), linetype = 2, alpha = 0.5) +   facet_wrap(~ geo_value, scales = \"free_y\", ncol = 3) +   scale_x_date(minor_breaks = \"month\", date_labels = \"%b %y\") +   labs(title = \"Properly versioned data\", x = \"Date\",         y = \"Reported COVID-19 case rates\") +   theme(legend.position = \"none\")"},{"path":"https://cmu-delphi.github.io/epipredict/articles/simple-forecasts.html","id":"reproducing-the-arx-forecaster","dir":"Articles","previous_headings":"","what":"Reproducing the ARX forecaster","title":"Simple forecasts","text":"First, download data process (hidden). now make forecasts archive compare forecasts latest data. , arx_forecaster() heavy lifting. creates leads target (respecting time stamps locations) along lags features (, response doctors visits), estimates autoregressive model, creates predictions, non-parametric confidence bands. tunable parameters. Now plot top latest case rates.  look generally great, ’s ’ve used two locations, ’re behaviour rather different.","code":"# Latest snapshot of data, and forecast dates x_latest <- epix_as_of(x, max_version = max(x$DT$version)) fc_time_values <- seq(as.Date(\"2020-08-01\"), as.Date(\"2021-12-01\"),                        by = \"1 month\")   k_week_ahead <- function(ahead = 7, as_of = TRUE) {   if (as_of) {     x %>%       epix_slide(fc = arx_forecaster(         percent_cli, case_rate, geo_value, time_value,          args = arx_args_list(ahead = ahead, intercept = FALSE)),         n = 120, ref_time_values = fc_time_values) %>%       mutate(target_date = time_value + ahead, as_of = as_of,              geo_value = fc_key_vars)   } else {     x_latest %>%       epi_slide(fc = arx_forecaster(         percent_cli, case_rate, geo_value, time_value,         args = arx_args_list(ahead = ahead, intercept = FALSE)),         n = 120, ref_time_values = fc_time_values) %>%       mutate(target_date = time_value + ahead, as_of = as_of)   } }  # Generate the forecasts, and bind them together fc <- bind_rows(   purrr::map_dfr(c(7,14,21,28), ~ k_week_ahead(.x, as_of = TRUE)),   purrr::map_dfr(c(7,14,21,28), ~ k_week_ahead(.x, as_of = FALSE)) ) ggplot(fc, aes(x = target_date, group = time_value, fill = as_of)) +   geom_line(data = x_latest, aes(x = time_value, y = case_rate),             inherit.aes = FALSE, color = \"gray50\") +   geom_ribbon(aes(ymin = fc_q0.05, ymax = fc_q0.95), alpha = 0.4) +   geom_line(aes(y = fc_point)) + geom_point(aes(y = fc_point), size = 0.5) +   geom_vline(aes(xintercept = time_value), linetype = 2, alpha = 0.5) +   facet_grid(vars(geo_value), vars(as_of), scales = \"free\") +   scale_x_date(minor_breaks = \"month\", date_labels = \"%b %y\") +   labs(x = \"Date\", y = \"Reported COVID-19 case rates\") +   theme(legend.position = \"none\")"},{"path":"https://cmu-delphi.github.io/epipredict/articles/simple-forecasts.html","id":"smooth-forecasts-at-daily-horizons","dir":"Articles","previous_headings":"","what":"Smooth forecasts at daily horizons","title":"Simple forecasts","text":"making forecasts multiple horizons, may want “smooth” rather jagged . One way , described Tuzhilina et al. estimate version multiple least squares model response vector \\(Y \\\\mathbb{R}^{d}\\) \\(d\\) number horizons. , example, taking \\(h = {7, 14, 21, 28}\\) , result \\(d=4\\). concatenating row-wise matrix \\(\\mathbf{Y}\\), multiple least squares solves \\(d\\) OLS problems simultaneously optimizing \\[ \\min_\\Theta \\lVert \\mathbf{Y} - \\mathbf{X}\\Theta \\rVert_F^2 \\] \\(\\lVert\\mathbf{}\\rVert_F\\) Frobenius norm matrix \\(\\mathbf{}\\) given \\(\\left(\\sum_{ij} a_{ij}^2\\right)^{1/2}\\) \\(\\Theta\\) matrix coefficients \\(\\mathbb{R}^{p\\times d}\\). produce smooth forecasts, first expand vector horizons \\(h\\) basis (say basis \\(\\) polynomials, \\(\\leq d\\)) right multiply \\(\\mathbf{Y}\\) result. leads following smoothed optimization problem \\[ \\min_\\Gamma \\lVert \\mathbf{Y}\\mathbf{H}^\\mathsf{T} - \\mathbf{X}\\Gamma \\rVert_F^2. \\] Predictions can produced easily undoing transformation \\(\\mathbf{H}\\). See Tuzhilina et al. details. epipredict, methodology implemented smooth_arx_forecaster(). , ’ll make forecasts archive, time h=1:28 =4. Everything else works similarly arx_forecaster() . Unfortunately, ’s bug forecaster…","code":"fc_data <- x %>%   epix_slide(     fc = smooth_arx_forecaster(       percent_cli, case_rate, geo_value, time_value     ) %>% nest_by(key_vars), # on each date, this produces a data frame,                               # which we nest to allow for sliding.     n = 120, ref_time_values = fc_time_values) %>%   unnest(fc_data) %>% # unnest it to get a long dataframe like before   mutate(target_date = time_value + ahead) %>%   rename(geo_value = fc_key_vars) ggplot(fc_data, aes(x = target_date, group = time_value)) +   geom_vline(aes(xintercept = time_value), linetype = 2, alpha = 0.5) +   geom_line(data = x_latest, aes(x = time_value, y = case_rate),             inherit.aes = FALSE, color = \"gray50\") +   geom_ribbon(aes(ymin = q0.05, ymax = q0.95, fill = geo_value), alpha = 0.4) +   geom_line(aes(y = point)) +   geom_point(aes(y = point), size = 0.5) +   facet_wrap(~ geo_value, scales = \"free_y\") +   scale_x_date(minor_breaks = \"month\", date_labels = \"%b %y\") +   labs(x = \"Date\", y = \"Reported COVID-19 case rates\") +   theme(legend.position = \"none\")"},{"path":"https://cmu-delphi.github.io/epipredict/articles/simple-forecasts.html","id":"using-data-for-canada","dir":"Articles","previous_headings":"","what":"Using data for Canada","title":"Simple forecasts","text":"leveraging flexibility epiprocess, can apply techniques data sources. Since ’m British Columbia, may well thing Canada. COVID-19 Canada Open Data Working Group collects daily time series data COVID-19 cases, deaths, recoveries, testing vaccinations health region province levels. Data collected publicly available sources government datasets news releases. Unfortunately, simple versioned source, created Commit history. First, load versioned case numbers provincial level, convert epi_archive object. run similar forcasting exercise . figures shows results provinces. Note showing 7-day averages rather reported case numbers due highly variable provincial reporting mismatches.","code":"# source(\"drafts/canada-case-rates.R) can <- readRDS(   system.file(\"extdata\", \"can_prov_cases.rds\",                package = \"epipredict\", mustWork = TRUE)   ) %>%   group_by(version, geo_value) %>%    arrange(time_value) %>%    mutate(cr_7dav = RcppRoll::roll_meanr(case_rate, n = 7L)) #%>%   #filter(geo_value %in% c('Alberta', \"BC\")) can <- as_epi_archive(can) can_latest <- epix_as_of(can, max_version = max(can$DT$version))  can_k_week_ahead <- function(ahead = 7, as_of = TRUE) {   if (as_of) {     can %>%       epix_slide(fc = arx_forecaster(         y = cr_7dav, key_vars = geo_value, time_value = time_value,         args = arx_args_list(intercept = FALSE, ahead = ahead)),         n = 120, ref_time_values = fc_time_values) %>%       mutate(target_date = time_value + ahead, geo_value = fc_key_vars,              as_of = as_of)   } else {     can_latest %>%       epi_slide(fc = arx_forecaster(         y = cr_7dav, key_vars = geo_value, time_value = time_value,         args = arx_args_list(intercept = FALSE, ahead = ahead)),         n = 120, ref_time_values = fc_time_values) %>%       mutate(target_date = time_value + ahead, geo_value = fc_key_vars,              as_of = as_of)   } }  can_fc <- bind_rows(   purrr:::map_dfr(c(7,14,21,28), ~ can_k_week_ahead(ahead = .x, as_of = TRUE)),   purrr:::map_dfr(c(7,14,21,28), ~ can_k_week_ahead(ahead = .x, as_of = FALSE)) ) ggplot(can_fc %>% filter(! as_of),         aes(x = target_date, group = time_value)) +   coord_cartesian(xlim = lubridate::ymd(c(\"2020-12-01\", NA))) +   geom_line(data = can_latest, aes(x = time_value, y = cr_7dav),             inherit.aes = FALSE, color = \"gray50\") +   geom_ribbon(aes(ymin = fc_q0.05, ymax = fc_q0.95, fill = geo_value),               alpha = 0.4) +   geom_line(aes(y = fc_point)) + geom_point(aes(y = fc_point), size = 0.5) +   geom_vline(aes(xintercept = time_value), linetype = 2, alpha = 0.5) +   facet_wrap(~geo_value, scales = \"free_y\", ncol = 3) +   scale_x_date(minor_breaks = \"month\", date_labels = \"%b %y\") +   labs(title = \"Finalized data\", x = \"Date\",         y = \"Reported COVID-19 case rates\") +   theme(legend.position = \"none\") ggplot(can_fc %>% filter(as_of),         aes(x = target_date, group = time_value)) +   coord_cartesian(xlim = lubridate::ymd(c(\"2020-12-01\", NA))) +   geom_line(data = can_latest, aes(x = time_value, y = cr_7dav),             inherit.aes = FALSE, color = \"gray50\") +   geom_ribbon(aes(ymin = fc_q0.05, ymax = fc_q0.95, fill = geo_value),               alpha = 0.4) +   geom_line(aes(y = fc_point)) + geom_point(aes(y = fc_point), size = 0.5) +   geom_vline(aes(xintercept = time_value), linetype = 2, alpha = 0.5) +   facet_wrap(~ geo_value, scales = \"free_y\", ncol = 3) +   scale_x_date(minor_breaks = \"month\", date_labels = \"%b %y\") +   labs(title = \"Properly versioned data\", x = \"Date\",         y = \"Reported COVID-19 case rates\") +   theme(legend.position = \"none\")"},{"path":"https://cmu-delphi.github.io/epipredict/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jacob Bien. Author. Daniel McDonald. Author. Ryan Tibshirani. Author, maintainer.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bien J, McDonald D, Tibshirani R (2022). epipredict: Basic epidemiology forecasting methods. https://github.com/cmu-delphi/epipredict/, https://cmu-delphi.github.io/epiprocess.","code":"@Manual{,   title = {epipredict: Basic epidemiology forecasting methods},   author = {Jacob Bien and Daniel McDonald and Ryan Tibshirani},   year = {2022},   note = {https://github.com/cmu-delphi/epipredict/, https://cmu-delphi.github.io/epiprocess}, }"},{"path":"https://cmu-delphi.github.io/epipredict/index.html","id":"epipredict","dir":"","previous_headings":"","what":"Basic epidemiology forecasting methods","title":"Basic epidemiology forecasting methods","text":"Note: package currently development likely work expected.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Basic epidemiology forecasting methods","text":"can install development version epipredict GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"cmu-delphi/epipredict\")"},{"path":"https://cmu-delphi.github.io/epipredict/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Basic epidemiology forecasting methods","text":"can view documentation main branch https://cmu-delphi.github.io/epipredict.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/index.html","id":"goals-for-epipredict","dir":"","previous_headings":"","what":"Goals for epipredict","title":"Basic epidemiology forecasting methods","text":"hope provide: Baseline flat-line forecaster Autoregressive forecaster Autoregressive classifier Preprocessor: things data model training Trainer: train model data, resulting fitted model object Predictor: make predictions, using fitted model object Postprocessor: things predictions returning Target audience: Basic. data, calls forecaster default arguments. Intermediate. Wants examine changes arguments, take advantage built flexibility. Advanced. Wants write forecasters. Maybe willing build components write. Advanced user find task relatively easy (’ll show ). Example: quiet period, user decides want first predict whether surge occur, say using variant information GISAID. surging locations, want train AR model using past surges location. Everywhere else, predict flat line. able lines code. Delphi’s forecasts produced/evaluated way now, code base scattered evolving. want consolidate, generalize, simplify allow others benefit well. basic framework allow something like following. feel familiar anyone working R+tidyverse. Simple linear autoregressive model scaling (modular) run epi_df one line. hypothetical example first classifying, fitting different models also fit framework. isn’t far current production models.","code":"my_fcaster = new_epi_predictor() %>%   add_preprocessor(scaler, var = cases, by = pop) %>%   add_preprocessor(lagger, var = dv_cli, lags = c(0, 7, 14)) %>%   add_trainer(lm) %>%   add_predictor(lm.predict) %>%   add_postprocessor(scaler, by = 1/pop) my_fcaster(lead(cases, 7) ~ ., epi_df, key_vars, time_vars)"},{"path":"https://cmu-delphi.github.io/epipredict/index.html","id":"why-doesnt-this-exist","dir":"","previous_headings":"Goals for epipredict","what":"Why doesn’t this exist","title":"Basic epidemiology forecasting methods","text":"Closest neighbor {fable}. want major downsides: Small modifications hard (e.g. can’t “just use” glmnet instead lm) AR model. “iterative” forecasting, bad epidemiology. Much better simple models use “direct” forecasting. epi tasks, dramatically -cover. Layering possible/natural Can’t use methods aren’t already implemented. forecasts can’t produced fable. However: developers behind fable wrote package called fabletools powers model creation (based R6). can almost certainly borrow technology lever .","code":""},{"path":"https://cmu-delphi.github.io/epipredict/index.html","id":"what-this-isnt","dir":"","previous_headings":"Goals for epipredict","what":"What this isn’t","title":"Basic epidemiology forecasting methods","text":"framework SIR models. intend create simple versions, advanced models—use variants, hospitalizations, different types immunity, age stratification, etc.—compartmentalized way (though see pypm). types models also better scenario modeling short term forecasts unless quite complicated.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"ARX forecaster argument constructor — arx_args_list","title":"ARX forecaster argument constructor — arx_args_list","text":"Constructs list arguments arx_forecaster().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARX forecaster argument constructor — arx_args_list","text":"","code":"arx_args_list(   lags = c(0, 7, 14),   ahead = 7,   min_train_window = 20,   levels = c(0.05, 0.95),   intercept = TRUE,   symmetrize = TRUE,   nonneg = TRUE,   quantile_by_key = FALSE )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARX forecaster argument constructor — arx_args_list","text":"lags Vector List. Positive integers enumerating lags use autoregressive-type models. ahead Integer. Number time steps ahead forecast date forecasts produced. min_train_window Integer. minimal amount training data needed produce forecast. smaller, forecaster return NA predictions. levels Vector NULL. vector probabilities produce prediction intervals. created computing quantiles training residuals. NULL value result point forecasts . intercept Logical. default TRUE includes intercept forecaster. symmetrize Logical. default TRUE calculates symmetric prediction intervals. nonneg Logical. default TRUE enforeces nonnegative predictions hard-thresholding 0. quantile_by_key currently implemented","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARX forecaster argument constructor — arx_args_list","text":"list containing updated parameter choices.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_args_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARX forecaster argument constructor — arx_args_list","text":"","code":"arx_args_list() #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $min_train_window #> [1] 20 #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  arx_args_list(symmetrize = FALSE) #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $min_train_window #> [1] 20 #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] FALSE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  arx_args_list(levels = c(.1, .3, .7, .9), min_train_window = 120) #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $min_train_window #> [1] 120 #>  #> $levels #> [1] 0.1 0.3 0.7 0.9 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>"},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_forecaster.html","id":null,"dir":"Reference","previous_headings":"","what":"AR forecaster with optional covariates — arx_forecaster","title":"AR forecaster with optional covariates — arx_forecaster","text":"AR forecaster optional covariates","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_forecaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AR forecaster with optional covariates — arx_forecaster","text":"","code":"arx_forecaster(x, y, key_vars, time_value, args = arx_args_list())"},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_forecaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AR forecaster with optional covariates — arx_forecaster","text":"x Covariates. Allowed missing (resulting AR y). y Response. key_vars Factor(s). prediction made unique combination. time_value time value associated row measurements. args Additional arguments specifying forecasting task. Created calling arx_args_list().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/arx_forecaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AR forecaster with optional covariates — arx_forecaster","text":"data frame point (optionally interval) forecasts single ahead (unique horizon) unique combination key_vars.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/assign_arg_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign argument list to inside an environment — assign_arg_list","title":"Assign argument list to inside an environment — assign_arg_list","text":"function similar attach() without need detach. Calling beginning forecaster makes members arg_list available inside forecaster ugly args$member syntax.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/assign_arg_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign argument list to inside an environment — assign_arg_list","text":"","code":"assign_arg_list(l, env = parent.frame())"},{"path":"https://cmu-delphi.github.io/epipredict/reference/assign_arg_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign argument list to inside an environment — assign_arg_list","text":"l List named arguments. env environment args assigned. default goes calling environment.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/assign_arg_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign argument list to inside an environment — assign_arg_list","text":"Nothing returned. Called side effects.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/assign_arg_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign argument list to inside an environment — assign_arg_list","text":"","code":"if (FALSE) {   rm(list = ls())   l <- list(a=1, b=c(12, 10), ff = function() -5)   assign_arg_list(l)   a }"},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_lags_and_leads.html","id":null,"dir":"Reference","previous_headings":"","what":"Create lags and leads of predictors and response — create_lags_and_leads","title":"Create lags and leads of predictors and response — create_lags_and_leads","text":"Create lags leads predictors response","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_lags_and_leads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create lags and leads of predictors and response — create_lags_and_leads","text":"","code":"create_lags_and_leads(x, y, xy_lags, y_leads, time_value, key_vars = NULL)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_lags_and_leads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create lags and leads of predictors and response — create_lags_and_leads","text":"x Data frame matrix. Predictor variables. May missing. y Response vector. Typical usage \"lead\" y number steps forward prediction horizon (ahead). xy_lags Vector list. vector, lags apply column x y. list, must length ncol(x)+1 component apply requisite predictor. NULL list element remove variable completely result. Negative values \"lead\" variable. y_leads Scalar vector. scalar, \"lead\" y amount. vector produce multiple columns y useful model. Negative values \"lag\" variable. time_value Vector time values data observed key_vars Factors representing different groups. May NULL (default).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_lags_and_leads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create lags and leads of predictors and response — create_lags_and_leads","text":"data.frame.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/create_lags_and_leads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create lags and leads of predictors and response — create_lags_and_leads","text":"","code":"x <- 1:20 y <- -20:-1 time_value <- c(1:18, 20, 21) create_lags_and_leads(x, y, c(1, 2), 1, time_value) #> # A tibble: 24 × 7 #>    keys  time_value    y1    x1    x2    x3    x4 #>    <chr>      <dbl> <int> <int> <int> <int> <int> #>  1 empty          0   -20    NA    NA    NA    NA #>  2 empty          1   -19    NA    NA    NA    NA #>  3 empty          2   -18     1    NA   -20    NA #>  4 empty          3   -17     2     1   -19   -20 #>  5 empty          4   -16     3     2   -18   -19 #>  6 empty          5   -15     4     3   -17   -18 #>  7 empty          6   -14     5     4   -16   -17 #>  8 empty          7   -13     6     5   -15   -16 #>  9 empty          8   -12     7     6   -14   -15 #> 10 empty          9   -11     8     7   -13   -14 #> # … with 14 more rows create_lags_and_leads(x, y, list(c(1, 2), 1), 1, time_value) #> # A tibble: 24 × 6 #>    keys  time_value    y1    x1    x2    x3 #>    <chr>      <dbl> <int> <int> <int> <int> #>  1 empty          0   -20    NA    NA    NA #>  2 empty          1   -19    NA    NA    NA #>  3 empty          2   -18     1    NA   -20 #>  4 empty          3   -17     2     1   -19 #>  5 empty          4   -16     3     2   -18 #>  6 empty          5   -15     4     3   -17 #>  7 empty          6   -14     5     4   -16 #>  8 empty          7   -13     6     5   -15 #>  9 empty          8   -12     7     6   -14 #> 10 empty          9   -11     8     7   -13 #> # … with 14 more rows create_lags_and_leads(x, y, list(c(-1, 1), NULL), 1, time_value) #> # A tibble: 23 × 5 #>    keys  time_value    y1    x1    x2 #>    <chr>      <dbl> <int> <int> <int> #>  1 empty          0   -20     1    NA #>  2 empty          1   -19     2    NA #>  3 empty          2   -18     3     1 #>  4 empty          3   -17     4     2 #>  5 empty          4   -16     5     3 #>  6 empty          5   -15     6     4 #>  7 empty          6   -14     7     5 #>  8 empty          7   -13     8     6 #>  9 empty          8   -12     9     7 #> 10 empty          9   -11    10     8 #> # … with 13 more rows create_lags_and_leads(x, y, c(1, 2), c(0, 1), time_value) #> # A tibble: 24 × 8 #>    keys  time_value    y1    y2    x1    x2    x3    x4 #>    <chr>      <dbl> <int> <int> <int> <int> <int> <int> #>  1 empty          1   -20   -19    NA    NA    NA    NA #>  2 empty          2   -19   -18     1    NA   -20    NA #>  3 empty          3   -18   -17     2     1   -19   -20 #>  4 empty          4   -17   -16     3     2   -18   -19 #>  5 empty          5   -16   -15     4     3   -17   -18 #>  6 empty          6   -15   -14     5     4   -16   -17 #>  7 empty          7   -14   -13     6     5   -15   -16 #>  8 empty          8   -13   -12     7     6   -14   -15 #>  9 empty          9   -12   -11     8     7   -13   -14 #> 10 empty         10   -11   -10     9     8   -12   -13 #> # … with 14 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/reference/df_mat_mul.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiply columns of a data.frame by a matrix — df_mat_mul","title":"Multiply columns of a data.frame by a matrix — df_mat_mul","text":"Multiply columns data.frame matrix","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/df_mat_mul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiply columns of a data.frame by a matrix — df_mat_mul","text":"","code":"df_mat_mul(dat, mat, out_names = \"out\", ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/df_mat_mul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiply columns of a data.frame by a matrix — df_mat_mul","text":"dat data.frame mat matrix out_names Character vector. Creates names resulting columns multiplication. scalar, treated prefix remaining columns numbered sequentially. ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/df_mat_mul.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiply columns of a data.frame by a matrix — df_mat_mul","text":"data.frame new columns right. Original columns removed.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/df_mat_mul.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiply columns of a data.frame by a matrix — df_mat_mul","text":"","code":"df <- data.frame(matrix(1:200, ncol = 10)) mat <- matrix(1:10, ncol = 2) df_mat_mul(df, mat, \"z\", dplyr::num_range(\"X\", 2:6)) #>    X1  X7  X8  X9 X10   z1   z2 #> 1   1 121 141 161 181 1115 2640 #> 2   2 122 142 162 182 1130 2680 #> 3   3 123 143 163 183 1145 2720 #> 4   4 124 144 164 184 1160 2760 #> 5   5 125 145 165 185 1175 2800 #> 6   6 126 146 166 186 1190 2840 #> 7   7 127 147 167 187 1205 2880 #> 8   8 128 148 168 188 1220 2920 #> 9   9 129 149 169 189 1235 2960 #> 10 10 130 150 170 190 1250 3000 #> 11 11 131 151 171 191 1265 3040 #> 12 12 132 152 172 192 1280 3080 #> 13 13 133 153 173 193 1295 3120 #> 14 14 134 154 174 194 1310 3160 #> 15 15 135 155 175 195 1325 3200 #> 16 16 136 156 176 196 1340 3240 #> 17 17 137 157 177 197 1355 3280 #> 18 18 138 158 178 198 1370 3320 #> 19 19 139 159 179 199 1385 3360 #> 20 20 140 160 180 200 1400 3400"},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Grab any keys associated to an epi_df — epi_keys","title":"Grab any keys associated to an epi_df — epi_keys","text":"Grab keys associated epi_df","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grab any keys associated to an epi_df — epi_keys","text":"","code":"epi_keys(x)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grab any keys associated to an epi_df — epi_keys","text":"x data.frame, tibble, epi_df","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grab any keys associated to an epi_df — epi_keys","text":"epi_df, returns \"keys\". Otherwise NULL","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a epi_recipe for preprocessing data — epi_recipe","title":"Create a epi_recipe for preprocessing data — epi_recipe","text":"recipe description steps applied data set order prepare data analysis. loose wrapper around recipes::recipe() properly handle additional columns present epi_df","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a epi_recipe for preprocessing data — epi_recipe","text":"","code":"epi_recipe(x, ...)  # S3 method for default epi_recipe(x, ...)  # S3 method for epi_df epi_recipe(x, formula = NULL, ..., vars = NULL, roles = NULL)  # S3 method for formula epi_recipe(formula, data, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a epi_recipe for preprocessing data — epi_recipe","text":"x, data data frame, tibble, epi_df template data set (see ). always coerced first row avoid memory issues ... arguments passed methods (currently used). formula model formula. -line functions used (e.g. log(x), x:y, etc.) minus signs allowed. types transformations enacted using step functions package. Dots allowed simple multivariate outcome terms (.e. need cbind; see Examples). vars character string column names corresponding variables used context (see ) roles character string (length vars) describes single role variable take. value anything common roles \"outcome\", \"predictor\", \"time_value\", \"geo_value\"","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a epi_recipe for preprocessing data — epi_recipe","text":"object class recipe sub-objects: var_info tibble containing information original data set columns term_info tibble contains current set terms data set. initially defaults data contained var_info. steps list step  check objects define sequence preprocessing operations applied data. default value NULL template tibble data. initialized data given data argument can different recipe trained.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift predictors while maintaining grouping and time_value ordering — epi_shift","title":"Shift predictors while maintaining grouping and time_value ordering — epi_shift","text":"lower-level function. performs error checking.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift predictors while maintaining grouping and time_value ordering — epi_shift","text":"","code":"epi_shift(x, lags, time_value, keys = NULL, out_name = \"x\")"},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift predictors while maintaining grouping and time_value ordering — epi_shift","text":"x Data frame. Variables lag lags List. list element vector lags. Negative values produce leads. list length number columns x. time_value Vector. length x giving time stamps. keys Data frame, vector, NULL. Additional grouping vars. out_name Chr. output list use prefix.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/epi_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift predictors while maintaining grouping and time_value ordering — epi_shift","text":"list tibbles","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_precision.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the precision of a number — get_precision","title":"Determine the precision of a number — get_precision","text":"Determine precision number, number digits past decimal point.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_precision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the precision of a number — get_precision","text":"","code":"get_precision(x, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_precision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the precision of a number — get_precision","text":"x numeric vector ... Ignore ","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_precision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the precision of a number — get_precision","text":"vector integers, number digits (last non-zero digit) past decimal point.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/get_precision.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the precision of a number — get_precision","text":"number expressed scientific notation, take number digits","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/grab_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names from a data frame via tidy select — grab_names","title":"Get the names from a data frame via tidy select — grab_names","text":"Given data.frame, use <tidy-select> syntax choose variables. Return names variables","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/grab_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names from a data frame via tidy select — grab_names","text":"","code":"grab_names(dat, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/reference/grab_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names from a data frame via tidy select — grab_names","text":"dat data.frame ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/grab_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names from a data frame via tidy select — grab_names","text":"character vector","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/grab_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the names from a data frame via tidy select — grab_names","text":"internal function, checks performed.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/grab_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names from a data frame via tidy select — grab_names","text":"","code":"df <- data.frame(a = 1, b = 2, cc = rep(NA, 3)) grab_names(df, dplyr::starts_with(\"c\")) #> [1] \"cc\""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"KNN enhanced iterative AR forecaster argument constructor — knn_iteraive_ar_args_list","title":"KNN enhanced iterative AR forecaster argument constructor — knn_iteraive_ar_args_list","text":"Constructs list arguments knn_iteraive_ar_forecaster().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KNN enhanced iterative AR forecaster argument constructor — knn_iteraive_ar_args_list","text":"","code":"knn_iteraive_ar_args_list(   lags = c(0, 7, 14),   query_window_len = 50,   topK = 500,   ahead = 7,   min_train_window = 20,   levels = c(0.05, 0.95),   intercept = TRUE,   symmetrize = TRUE,   nonneg = TRUE,   quantile_by_key = FALSE,   update_model = TRUE )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KNN enhanced iterative AR forecaster argument constructor — knn_iteraive_ar_args_list","text":"lags Vector List. Positive integers enumerating lags use autoregressive-type models. query_window_len Integer. Length query window KNN searching. topK Integer. Number similar training samples. ahead Integer. Number time steps ahead forecast date forecasts produced. min_train_window Integer. minimal amount training data needed produce forecast. smaller, forecaster return NA predictions. levels Vector NULL. vector probabilities produce prediction intervals. created computing quantiles training residuals. NULL value result point forecasts . intercept Logical. default TRUE includes intercept forecaster. symmetrize Logical. default TRUE calculates symmetric prediction intervals. nonneg Logical. default TRUE enforeces nonnegative predictions hard-thresholding 0. quantile_by_key currently implemented update_model Logical. default TRUE updates one-step ahead model every time iterative forecasting strategy.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KNN enhanced iterative AR forecaster argument constructor — knn_iteraive_ar_args_list","text":"list containing updated parameter choices.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_args_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KNN enhanced iterative AR forecaster argument constructor — knn_iteraive_ar_args_list","text":"","code":"arx_args_list() #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $min_train_window #> [1] 20 #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  arx_args_list(symmetrize = FALSE) #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $min_train_window #> [1] 20 #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] FALSE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  arx_args_list(levels = c(.1, .3, .7, .9), min_train_window = 120) #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $min_train_window #> [1] 120 #>  #> $levels #> [1] 0.1 0.3 0.7 0.9 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>"},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_forecaster.html","id":null,"dir":"Reference","previous_headings":"","what":"KNN enhanced iterative AR forecaster with optional covariates — knn_iteraive_ar_forecaster","title":"KNN enhanced iterative AR forecaster with optional covariates — knn_iteraive_ar_forecaster","text":"KNN enhanced iterative AR forecaster optional covariates","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_forecaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KNN enhanced iterative AR forecaster with optional covariates — knn_iteraive_ar_forecaster","text":"","code":"knn_iteraive_ar_forecaster(   x,   y,   key_vars,   time_value,   args = knn_iteraive_ar_args_list() )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_forecaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KNN enhanced iterative AR forecaster with optional covariates — knn_iteraive_ar_forecaster","text":"x Unused covariates. Must missing (resulting AR y) . y Response. key_vars Factor(s). prediction made unique combination. time_value time value associated row measurements. args Additional arguments specifying forecasting task. Created calling knn_iteraive_ar_args_list().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knn_iteraive_ar_forecaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KNN enhanced iterative AR forecaster with optional covariates — knn_iteraive_ar_forecaster","text":"data frame point (optionally interval) forecasts multiple aheads (multiple horizons one specified ahead) unique combination key_vars.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"KNN enhanced ARX forecaster argument constructor — knnarx_args_list","title":"KNN enhanced ARX forecaster argument constructor — knnarx_args_list","text":"Constructs list arguments knnarx_forecaster().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KNN enhanced ARX forecaster argument constructor — knnarx_args_list","text":"","code":"knnarx_args_list(   lags = c(0, 7, 14),   query_window_len = 50,   topK = 500,   ahead = 7,   min_train_window = 20,   levels = c(0.05, 0.95),   intercept = TRUE,   symmetrize = TRUE,   nonneg = TRUE,   quantile_by_key = FALSE )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KNN enhanced ARX forecaster argument constructor — knnarx_args_list","text":"lags Vector List. Positive integers enumerating lags use autoregressive-type models. query_window_len Integer. Length query window KNN searching. topK Integer. Number similar training samples. ahead Integer. Number time steps ahead forecast date forecasts produced. min_train_window Integer. minimal amount training data needed produce forecast. smaller, forecaster return NA predictions. levels Vector NULL. vector probabilities produce prediction intervals. created computing quantiles training residuals. NULL value result point forecasts . intercept Logical. default TRUE includes intercept forecaster. symmetrize Logical. default TRUE calculates symmetric prediction intervals. nonneg Logical. default TRUE enforeces nonnegative predictions hard-thresholding 0. quantile_by_key currently implemented","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KNN enhanced ARX forecaster argument constructor — knnarx_args_list","text":"list containing updated parameter choices.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_args_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KNN enhanced ARX forecaster argument constructor — knnarx_args_list","text":"","code":"knnarx_args_list() #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $query_window_len #> [1] 50 #>  #> $topK #> [1] 500 #>  #> $min_train_window #> [1] 20 #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  knnarx_args_list(symmetrize = FALSE) #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $query_window_len #> [1] 50 #>  #> $topK #> [1] 500 #>  #> $min_train_window #> [1] 20 #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] FALSE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  knnarx_args_list(levels = c(.1, .3, .7, .9), min_train_window = 120) #> $lags #> [1]  0  7 14 #>  #> $ahead #> [1] 7 #>  #> $query_window_len #> [1] 50 #>  #> $topK #> [1] 500 #>  #> $min_train_window #> [1] 120 #>  #> $levels #> [1] 0.1 0.3 0.7 0.9 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>"},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_forecaster.html","id":null,"dir":"Reference","previous_headings":"","what":"KNN enhanced ARX forecaster with optional covariates — knnarx_forecaster","title":"KNN enhanced ARX forecaster with optional covariates — knnarx_forecaster","text":"KNN enhanced ARX forecaster optional covariates","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_forecaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KNN enhanced ARX forecaster with optional covariates — knnarx_forecaster","text":"","code":"knnarx_forecaster(x, y, key_vars, time_value, args = knnarx_args_list())"},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_forecaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KNN enhanced ARX forecaster with optional covariates — knnarx_forecaster","text":"x Covariates. Allowed missing (resulting AR y). y Response. key_vars Factor(s). prediction made unique combination. time_value time value associated row measurements. args Additional arguments specifying forecasting task. Created calling knnarx_args_list().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/knnarx_forecaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KNN enhanced ARX forecaster with optional covariates — knnarx_forecaster","text":"data frame point (optionally interval) forecasts single ahead (unique horizon) unique combination key_vars.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://cmu-delphi.github.io/epipredict/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth ARX forecaster argument constructor — smooth_arx_args_list","title":"Smooth ARX forecaster argument constructor — smooth_arx_args_list","text":"Constructs list arguments smooth_arx_forecaster().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth ARX forecaster argument constructor — smooth_arx_args_list","text":"","code":"smooth_arx_args_list(   lags = c(0, 7, 14),   ahead = 1:28,   degree = 4,   kronecker_version = FALSE,   min_train_window = 20,   levels = c(0.05, 0.95),   intercept = TRUE,   symmetrize = TRUE,   nonneg = TRUE,   quantile_by_key = FALSE )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth ARX forecaster argument constructor — smooth_arx_args_list","text":"lags Vector List. Positive integers enumerating lags use autoregressive-type models. ahead Integer. Number time steps ahead forecast date forecasts produced. degree Integer. Order orthodonal polynomials use smoothing. strictly less length(ahead). kronecker_version Logical. ensure \"seen\" latest ahead value. default FALSE computationally simpler uses less recent data. min_train_window Integer. minimal amount training data needed produce forecast. smaller, forecaster return NA predictions. levels Vector NULL. vector probabilities produce prediction intervals. created computing quantiles training residuals. NULL value result point forecasts . intercept Logical. default TRUE includes intercept forecaster. symmetrize Logical. default TRUE calculates symmetric prediction intervals. nonneg Logical. default TRUE enforeces nonnegative predictions hard-thresholding 0. quantile_by_key currently implemented.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth ARX forecaster argument constructor — smooth_arx_args_list","text":"list containing updated parameter choices.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_args_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth ARX forecaster argument constructor — smooth_arx_args_list","text":"","code":"smooth_arx_args_list() #> $lags #> [1]  0  7 14 #>  #> $ahead #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 #>  #> $degree #> [1] 4 #>  #> $min_train_window #> [1] 20 #>  #> $kronecker_version #> [1] FALSE #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  smooth_arx_args_list(symmetrize = FALSE) #> $lags #> [1]  0  7 14 #>  #> $ahead #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 #>  #> $degree #> [1] 4 #>  #> $min_train_window #> [1] 20 #>  #> $kronecker_version #> [1] FALSE #>  #> $levels #> [1] 0.05 0.95 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] FALSE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>  smooth_arx_args_list(levels = c(.1, .3, .7, .9), min_train_window = 120) #> $lags #> [1]  0  7 14 #>  #> $ahead #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 #>  #> $degree #> [1] 4 #>  #> $min_train_window #> [1] 120 #>  #> $kronecker_version #> [1] FALSE #>  #> $levels #> [1] 0.1 0.3 0.7 0.9 #>  #> $intercept #> [1] TRUE #>  #> $symmetrize #> [1] TRUE #>  #> $nonneg #> [1] TRUE #>  #> $max_lags #> [1] 14 #>"},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_forecaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth AR forecaster with optional covariates — smooth_arx_forecaster","title":"Smooth AR forecaster with optional covariates — smooth_arx_forecaster","text":"Smooth AR forecaster optional covariates","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_forecaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth AR forecaster with optional covariates — smooth_arx_forecaster","text":"","code":"smooth_arx_forecaster(   x,   y,   key_vars,   time_value,   args = smooth_arx_args_list() )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_forecaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth AR forecaster with optional covariates — smooth_arx_forecaster","text":"x Covariates. Allowed missing (resulting AR y). y Response. key_vars Factor(s). prediction made unique combination. time_value time value associated row measurements. args Additional arguments specifying forecasting task. Created calling smooth_arx_args_list().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/smooth_arx_forecaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth AR forecaster with optional covariates — smooth_arx_forecaster","text":"data frame point (optionally interval) forecasts across multiple aheads unique combination key_vars.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_ahead.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a leading outcome — step_epi_ahead","title":"Create a leading outcome — step_epi_ahead","text":"step_epi_ahead creates specification recipe step add new columns leading data. Leading data default include NA values lag induced. can removed step_naomit(), may specify alternative filler value default argument. step_epi_lag creates specification recipe step add new columns lagged data. Lagged data default include NA values lag induced. can removed step_naomit(), may specify alternative filler value default argument.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_ahead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a leading outcome — step_epi_ahead","text":"","code":"step_epi_ahead(   recipe,   ...,   role = \"outcome\",   trained = FALSE,   ahead = 1,   prefix = \"ahead_\",   default = NA,   keys = epi_keys(recipe),   columns = NULL,   skip = FALSE,   id = rand_id(\"epi_ahead\") )  step_epi_lag(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   lag = 1,   prefix = \"lag_\",   default = NA,   keys = epi_keys(recipe),   columns = NULL,   skip = FALSE,   id = rand_id(\"epi_lag\") )"},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_ahead.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a leading outcome — step_epi_ahead","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role model terms created step, analysis role assigned? trained logical indicate quantities preprocessing estimated. ahead vector positive integers. specified column lead value vector. prefix prefix generated column names, default \"ahead_\". default Determines fills empty rows left leading/lagging (defaults NA). keys character vector keys epi_df columns character string variable names populated (eventually) terms argument. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify . lag vector positive integers. specified column lagged value vector.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_ahead.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a leading outcome — step_epi_ahead","text":"updated version recipe new step added sequence existing operations. updated version recipe new step added sequence existing operations.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_ahead.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a leading outcome — step_epi_ahead","text":"step assumes data already proper sequential order leading. step assumes data already proper sequential order lagging.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/reference/step_epi_ahead.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a leading outcome — step_epi_ahead","text":"","code":"tib <- tibble::tibble(   x = 1:5, y = 1:5,   time_value = seq(as.Date(\"2020-01-01\"), by = 1, length.out = 5),   geo_value = \"ca\"   ) %>% epiprocess::as_epi_df()  library(recipes) #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: ‘recipes’ #> The following object is masked from ‘package:stats’: #>  #>     step epi_recipe(y ~ x, data = tib) %>%   step_epi_lag(x, lag = 2:3) %>%   step_epi_ahead(y, ahead = 1) %>%   prep(tib) %>%   bake(tib) #> An `epi_df` object, with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2022-05-24 23:03:07 #>  #> # A tibble: 9 × 7 #>       x     y time_value geo_value lag_2_x lag_3_x ahead_1_y #>   <int> <int> <date>     <fct>       <int>   <int>     <int> #> 1    NA    NA 2019-12-31 ca             NA      NA         1 #> 2     1     1 2020-01-01 ca             NA      NA         2 #> 3     2     2 2020-01-02 ca             NA      NA         3 #> 4     3     3 2020-01-03 ca              1      NA         4 #> 5     4     4 2020-01-04 ca              2       1         5 #> 6     5     5 2020-01-05 ca              3       2        NA #> 7    NA    NA 2020-01-06 ca              4       3        NA #> 8    NA    NA 2020-01-07 ca              5       4        NA #> 9    NA    NA 2020-01-08 ca             NA       5        NA"},{"path":"https://cmu-delphi.github.io/epipredict/news/index.html","id":"epipredict-0009000","dir":"Changelog","previous_headings":"","what":"epipredict 0.0.0.9000","title":"epipredict 0.0.0.9000","text":"Publish public easy navigation Two simple forecasters test beds Working vignette","code":""}]
